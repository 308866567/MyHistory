int a;
a=0b11101101; 
0b代表2进制数 
0X代表16进制数

                                与运算的用途：
1）清零
如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。

2）取一个数的指定位
比如取数 X=1010 1110 的4位，只需要另找一个数Y，令Y的低4位为1，其余位为0，
即Y=0000 1111，然后将X与Y进行按位与运算（X&Y=0000 1110）即可得到X的指定位。

3）判断奇偶
只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。
因此可以用if ((a & 1) == 0)代替if (a % 2 == 0)来判断a是不是偶数。

                                或运算的用途：
1）常用来对一个数据的某些位设置为1
比如将数 X=1010 1110 的低4位设置为1，只需要另找一个数Y，令Y的低4位为1，其余位为0，
即Y=0000 1111，然后将X与Y进行按位或运算（X|Y=1010 1111）即可得到。

                                异或运算的用途：
1）翻转指定位
比如将数 X=1010 1110 的低4位进行翻转，只需要另找一个数Y，令Y的低4位为1，其余位为0，
即Y=0000 1111，然后将X与Y进行异或运算（X^Y=1010 0001）即可得到。
2）与0相异或值不变
例如：1010 1110 ^ 0000 0000 = 1010 1110
3）交换两个数
void Swap(int &a, int &b){
    if (a != b){
        a ^= b;
        b ^= a;
        a ^= b;
    }
}

                                取反运算的用途：
1）使一个数的最低位为零
使a的最低位为0，可以表示为：a & ~1。
~1的值为 1111 1111 1111 1110，再按"与"运算，最低位一定为0。
因为" ~"运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。

                               7.左移运算符（<<）
定义：将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。
设 a=1010 1110，a = a<< 2 将a的二进制位左移2位、右补0，即得a=1011 1000。
若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。

                               8.右移运算符（>>）
定义：将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。
例如：a=a>>2 将a的二进制位右移2位，左补0 或者 左补1得看被移数是正还是负。
操作数每右移一位，相当于该数除以2。

不同长度的数据进行位运算：
如果两个不同长度的数据进行位运算时，系统会将二者按右端对齐，然后进行位运算。

public void Test(int a){
    if((a & 1)==0){
        System.out.println("a是偶数");
    }else{
        System.out.println("a是奇数");
    }
}

public void Test(int a,int b){
    //通过位运算不会造成溢出
	int mid = a - (a - b) >> 1;
}

public int average(int a,int b){
	return (a & b)+((a ^ b) >> 1);
}
  二进制中1的个数
public class Solution{
    public int NumberOf1(int a){
        if(a == 0||a == 1){
            return a;
        }
        int count = 0;
        while(a != 0){
            count++;
            a = a & (a-1);
        }
        return count;
    }
}